package org.crnts.ticketingservice.serviceimpl;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Optional;

import org.crnts.ticketingservice.bean.IncidentResolvingBean;
import org.crnts.ticketingservice.entity.EmployeeEntity;
import org.crnts.ticketingservice.entity.IncidentResolvingEntity;
import org.crnts.ticketingservice.entity.PriorityEntity;
import org.crnts.ticketingservice.entity.StatusEntity;
import org.crnts.ticketingservice.exception.IncidentNotFoundException;
import org.crnts.ticketingservice.repository.IncidentResolvingRepository;
import org.crnts.ticketingservice.service.IncidentResolvingService;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.modelmapper.internal.bytebuddy.dynamic.loading.ClassReloadingStrategy.Strategy;
import org.modelmapper.spi.MatchingStrategy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class IncidentResolvingServiceimpl implements IncidentResolvingService {

	@Autowired
	IncidentResolvingRepository incidentResolvingRepository;

	@Autowired
	ModelMapper modelMapper;
	@Autowired
	RestTemplate restTemplate;
	DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");  
	   LocalDateTime now = LocalDateTime.now();  
	@Override
	public IncidentResolvingEntity save(IncidentResolvingBean incidentResolvingBean) {
		System.out.println("hiiiii service impl");
		// System.out.println(incidentResolvingEntity);
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.LOOSE);

		System.out.println("entered controller");
		System.out.println("Logic to return Employee for assigninging ticket");// 2it
		// EmployeeEntity entity=
		String url = "http://localhost:8081/api/employee/getEmployee/" + 2;
		EmployeeEntity employeeEntity = restTemplate.getForObject(url, EmployeeEntity.class);
		System.out.println(employeeEntity.toString());

		IncidentResolvingEntity entity = modelMapper.map(incidentResolvingBean, IncidentResolvingEntity.class);
		return incidentResolvingRepository.save(entity);

		// without modular mapping
		// IncidentResolvingEntity entity=new IncidentResolvingEntity();
//		IncidentResolvingEntity entity=new IncidentResolvingEntity();
//		PriorityEntity priorityEntity=new PriorityEntity();
//		StatusEntity statusEntity=new StatusEntity();
//		entity.setResolverId(incidentResolvingBean.getResolverId());
//		entity.setIncidentId(incidentResolvingBean.getIncidentId());
//		entity.setResponseTime(incidentResolvingBean.getResponseTime());
//		
//		priorityEntity.setPriorityId(incidentResolvingBean.getPriorityBean().getPriorityId());
//	entity.setPriorityEntity(priorityEntity);
//	statusEntity.setStatusCode(incidentResolvingBean.getStatusBean().getStatusCode());
//	entity.setStatusEntity(statusEntity);

	}

	@Override
	public void updatePriority(int newpriority, long incidentId) {
		Optional<IncidentResolvingEntity> optionalEntity = incidentResolvingRepository.findById(incidentId);

		if (optionalEntity.isPresent()) {

			IncidentResolvingEntity incidentResolvingEntity = optionalEntity.get();
			//incidentResolvingEntity.setPriorityEntity(newpriority);

			incidentResolvingRepository.save(incidentResolvingEntity);

		} else {
			throw new IncidentNotFoundException("incident not found");
		}

	}

//	@Override
//	public void update(IncidentResolvingEntity updateIncidentResolvingEntity, long id) {
//		IncidentResolvingEntity excistingIncidentResolvingEntity = incidentResolvingRepository.findById(id)
//				.orElseThrow(() -> new IncidentNotFoundException("revolving incident is not found with id" + id));
//
//		excistingIncidentResolvingEntity.setIncidentId(updateIncidentResolvingEntity.getIncidentId());
//		excistingIncidentResolvingEntity.setPriorityEntity(updateIncidentResolvingEntity.getPriorityEntity());
//		excistingIncidentResolvingEntity.setEmployeeEntity(updateIncidentResolvingEntity.getEmployeeEntity());
//		excistingIncidentResolvingEntity.setResponseTime(updateIncidentResolvingEntity.getResponseTime());
//		excistingIncidentResolvingEntity.setResolvingId(updateIncidentResolvingEntity.getResolvingId());
//		excistingIncidentResolvingEntity.setStatusEntity(updateIncidentResolvingEntity.getStatusEntity());
//		incidentResolvingRepository.save(excistingIncidentResolvingEntity);
//	}
//	
	
//	@Override
//	public void update(IncidentResolvingEntity updateIncidentResolvingEntity, long id) {
//		IncidentResolvingEntity excistingIncidentResolvingEntity = incidentResolvingRepository.findById(id)
//				.orElseThrow(() -> new IncidentNotFoundException("revolving incident is not found with id" + id));
//
//		excistingIncidentResolvingEntity.setIncidentId(updateIncidentResolvingEntity.getIncidentId());
//		excistingIncidentResolvingEntity.setPriorityEntity(updateIncidentResolvingEntity.getPriorityEntity());
//		excistingIncidentResolvingEntity.setEmployeeEntity(updateIncidentResolvingEntity.getEmployeeEntity());
//		excistingIncidentResolvingEntity.setResponseTime(updateIncidentResolvingEntity.getResponseTime());
//		excistingIncidentResolvingEntity.setResolvingId(updateIncidentResolvingEntity.getResolvingId());
//		excistingIncidentResolvingEntity.setStatusEntity(updateIncidentResolvingEntity.getStatusEntity());
//		
//		if((excistingIncidentResolvingEntity.getStatusEntity().getStatusCode())=="o")
//		{
//			excistingIncidentResolvingEntity.setResponseTime(dtf.format(now));
//			
//		}
//		incidentResolvingRepository.save(excistingIncidentResolvingEntity);
//	}
	
	@Override
	public IncidentResolvingBean update(IncidentResolvingBean incidentResolvingBean) {
		IncidentResolvingEntity excistingIncidentResolvingEntity = incidentResolvingRepository.findById(incidentResolvingBean.getResolvingId())
				.orElseThrow(() -> new IncidentNotFoundException("revolving incident is not found with id" + incidentResolvingBean.getResolvingId()));
		
		excistingIncidentResolvingEntity.setIncidentId(incidentResolvingBean.getIncidentId());
		System.out.println(excistingIncidentResolvingEntity.getIncidentId());
		
		int priorityId = incidentResolvingBean.getPriorityBean().getPriorityId();
		System.out.println("before setting"+priorityId);
		excistingIncidentResolvingEntity.getPriorityEntity().setPriorityId(priorityId);
		System.out.println("after setting"+excistingIncidentResolvingEntity.getPriorityEntity().getPriorityId());
		
		
		Long employeeId = incidentResolvingBean.getEmployeeBean().getEmployeeId();
		System.out.println(employeeId);
		excistingIncidentResolvingEntity.getEmployeeEntity().setEmployeeId(employeeId);
		excistingIncidentResolvingEntity.setResponseTime(incidentResolvingBean.getResponseTime());
		excistingIncidentResolvingEntity.setResolvingId(incidentResolvingBean.getResolvingId());
		
		StatusEntity statusEntityTemp=new StatusEntity();
//		
//		if((excistingIncidentResolvingEntity.getStatusEntity().getStatusCode())=="o")
//		{
//			excistingIncidentResolvingEntity.setResponseTime(dtf.format(now));
//			
//		}
		incidentResolvingRepository.save(excistingIncidentResolvingEntity);
		
		IncidentResolvingBean incidentResolvingBean2 = modelMapper.map(excistingIncidentResolvingEntity, IncidentResolvingBean.class);
		return incidentResolvingBean2;

		
	}

//	@Override
//	public void updateStatusCode(String statusCode, long incidentId) {
//		Optional<IncidentResolvingEntity> optionalEntity = incidentResolvingRepository.findById(incidentId);
//
//		if (optionalEntity.isPresent()) {
//
//			IncidentResolvingEntity incidentResolvingEntity = optionalEntity.get();
//			incidentResolvingEntity.getStatusEntity().setStatusCode(statusCode); 
//			if(statusCode=="o")
//			{
//				incidentResolvingEntity.setResponseTime(dtf.format(now));
//			}
//
//			incidentResolvingRepository.save(incidentResolvingEntity);
//			System.out.println(incidentResolvingEntity);
//
//		} else {
//			throw new IncidentNotFoundException("incident not found");
//		}
//		
//	}
	
	@Override
	public void updateStatusCode(String statusCode, long resolvingId) {
		Optional<IncidentResolvingEntity> optionalEntity = incidentResolvingRepository.findById(resolvingId);

		
	}

	@Override
	public void update(IncidentResolvingEntity incidentResolvingEntity, long id) {
		// TODO Auto-generated method stub
		
	}

}
