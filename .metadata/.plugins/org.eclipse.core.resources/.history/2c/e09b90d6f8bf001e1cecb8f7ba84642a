package org.crnts.ticketingservice.serviceimpl;

import java.net.http.HttpHeaders;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.crnts.ticketingservice.bean.EmployeeBean;
import org.crnts.ticketingservice.bean.IncidentResolvingBean;

import org.crnts.ticketingservice.entity.IncidentResolvingEntity;
import org.crnts.ticketingservice.entity.PriorityEntity;
import org.crnts.ticketingservice.entity.StatusEntity;
import org.crnts.ticketingservice.exception.IncidentNotFoundException;
import org.crnts.ticketingservice.repository.IncidentResolvingRepository;
import org.crnts.ticketingservice.service.IncidentResolvingService;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.modelmapper.internal.bytebuddy.dynamic.loading.ClassReloadingStrategy.Strategy;
import org.modelmapper.spi.MatchingStrategy;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import ch.qos.logback.core.joran.util.beans.BeanUtil;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class IncidentResolvingServiceimpl implements IncidentResolvingService {

	@Autowired
	IncidentResolvingRepository incidentResolvingRepository;
	
	IncidentResolvingServiceimpl incidentResolvingServiceimpl;
	
	

	@Autowired
	ModelMapper modelMapper;
	@Autowired
	RestTemplate restTemplate;
	DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
	LocalDateTime now = LocalDateTime.now();

	@Override
	public IncidentResolvingEntity save(IncidentResolvingBean incidentResolvingBean) {
		// System.out.println("hiiiii service impl");
		// System.out.println(incidentResolvingEntity);
		//modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.LOOSE);
		Long employeeId = incidentResolvingBean.getEmployeeBean().getEmployeeId();
		// System.out.println("entered controller");
		// System.out.println("Logic to return Employee for assigninging ticket");// 2it

		org.springframework.http.HttpHeaders httpHeaders = new org.springframework.http.HttpHeaders();
		httpHeaders.setContentType(MediaType.APPLICATION_JSON);

		HttpEntity<String> httpEntity = new HttpEntity<>(httpHeaders);

		String url = "http://localhost:8081/api/employee/getEmployee/" + employeeId;

		ResponseEntity<EmployeeBean> responseEntity = restTemplate.exchange(url, HttpMethod.GET, httpEntity,
				EmployeeBean.class);
		EmployeeBean body = responseEntity.getBody();
		incidentResolvingBean.setEmployeeBean(body);
	
		
		
	

		//IncidentResolvingEntity	entity = modelMapper.map(incidentResolvingBean, IncidentResolvingEntity.class);
		//return incidentResolvingRepository.save(entity);

		// without modular mapping
		 IncidentResolvingEntity entity=new IncidentResolvingEntity();
		
		PriorityEntity priorityEntity=new PriorityEntity();
		StatusEntity statusEntity=new StatusEntity();
		entity.setResolverId(incidentResolvingBean.getEmployeeBean().getEmployeeId());
		entity.setIncidentId(incidentResolvingBean.getIncidentId());
		entity.setResponseTime(incidentResolvingBean.getResponseTime());
		
		priorityEntity.setPriorityId(incidentResolvingBean.getPriorityBean().getPriorityId());
	entity.setPriorityEntity(priorityEntity);
	statusEntity.setStatusCode(incidentResolvingBean.getStatusBean().getStatusCode());
	entity.setStatusEntity(statusEntity);
	incidentResolvingRepository.save(entity);
	
	return entity;

	}

	@Override
	public void updatePriority(int newpriority, long incidentId) {
		Optional<IncidentResolvingEntity> optionalEntity = incidentResolvingRepository.findById(incidentId);

		if (optionalEntity.isPresent()) {

			IncidentResolvingEntity incidentResolvingEntity = optionalEntity.get();
			// incidentResolvingEntity.setPriorityEntity(newpriority);


			incidentResolvingRepository.save(incidentResolvingEntity);

		} else {
			throw new IncidentNotFoundException("incident not found");
		}

	}

//	@Override
//	public void update(IncidentResolvingEntity updateIncidentResolvingEntity, long id) {
//		IncidentResolvingEntity excistingIncidentResolvingEntity = incidentResolvingRepository.findById(id)
//				.orElseThrow(() -> new IncidentNotFoundException("revolving incident is not found with id" + id));
//
//		excistingIncidentResolvingEntity.setIncidentId(updateIncidentResolvingEntity.getIncidentId());
//		excistingIncidentResolvingEntity.setPriorityEntity(updateIncidentResolvingEntity.getPriorityEntity());
//		excistingIncidentResolvingEntity.setEmployeeEntity(updateIncidentResolvingEntity.getEmployeeEntity());
//		excistingIncidentResolvingEntity.setResponseTime(updateIncidentResolvingEntity.getResponseTime());
//		excistingIncidentResolvingEntity.setResolvingId(updateIncidentResolvingEntity.getResolvingId());
//		excistingIncidentResolvingEntity.setStatusEntity(updateIncidentResolvingEntity.getStatusEntity());
//		incidentResolvingRepository.save(excistingIncidentResolvingEntity);
//	}
//	

//	@Override
//	public void update(IncidentResolvingEntity updateIncidentResolvingEntity, long id) {
//		IncidentResolvingEntity excistingIncidentResolvingEntity = incidentResolvingRepository.findById(id)
//				.orElseThrow(() -> new IncidentNotFoundException("revolving incident is not found with id" + id));
//
//		excistingIncidentResolvingEntity.setIncidentId(updateIncidentResolvingEntity.getIncidentId());
//		excistingIncidentResolvingEntity.setPriorityEntity(updateIncidentResolvingEntity.getPriorityEntity());
//		excistingIncidentResolvingEntity.setEmployeeEntity(updateIncidentResolvingEntity.getEmployeeEntity());
//		excistingIncidentResolvingEntity.setResponseTime(updateIncidentResolvingEntity.getResponseTime());
//		excistingIncidentResolvingEntity.setResolvingId(updateIncidentResolvingEntity.getResolvingId());
//		excistingIncidentResolvingEntity.setStatusEntity(updateIncidentResolvingEntity.getStatusEntity());
//		
//		if((excistingIncidentResolvingEntity.getStatusEntity().getStatusCode())=="o")
//		{
//			excistingIncidentResolvingEntity.setResponseTime(dtf.format(now));
//			
//		}
//		incidentResolvingRepository.save(excistingIncidentResolvingEntity);
//	}

	@Override
	public IncidentResolvingBean update(IncidentResolvingBean incidentResolvingBean) {
		IncidentResolvingEntity excistingIncidentResolvingEntity = incidentResolvingRepository
				.findById(incidentResolvingBean.getResolvingId()).orElseThrow(() -> new IncidentNotFoundException(
						"revolving incident is not found with id" + incidentResolvingBean.getResolvingId()));
		excistingIncidentResolvingEntity.setResolvingId(incidentResolvingBean.getResolvingId());

		excistingIncidentResolvingEntity.setIncidentId(incidentResolvingBean.getIncidentId());

		excistingIncidentResolvingEntity.setResponseTime(incidentResolvingBean.getResponseTime());

//		EmployeeEntity emp = new EmployeeEntity();
//		emp.setEmployeeId(incidentResolvingBean.getEmployeeBean().getEmployeeId());
//		excistingIncidentResolvingEntity.setEmployeeEntity(emp);

		StatusEntity sts = new StatusEntity();
		sts.setStatusCode(incidentResolvingBean.getStatusBean().getStatusCode());
		excistingIncidentResolvingEntity.setStatusEntity(sts);

		PriorityEntity prior = new PriorityEntity();
		prior.setPriorityId(incidentResolvingBean.getPriorityBean().getPriorityId());
		excistingIncidentResolvingEntity.setPriorityEntity(prior);

		if (excistingIncidentResolvingEntity.getStatusEntity().getStatusCode().equalsIgnoreCase("o")) {

			excistingIncidentResolvingEntity.setResponseTime(dtf.format(now));
		}

		incidentResolvingRepository.save(excistingIncidentResolvingEntity);
		IncidentResolvingBean incidentResolvingBean2 = modelMapper.map(excistingIncidentResolvingEntity,
				IncidentResolvingBean.class);
		return incidentResolvingBean2;

	}

	@Override
	public List<IncidentResolvingBean> getAllOpenEntity() {
		 List<IncidentResolvingEntity> openIncident = incidentResolvingRepository.getOpenIncident();
		
		// to get 
		List<IncidentResolvingBean> collect = openIncident.stream()
				.map((entity) -> modelMapper.map(entity, IncidentResolvingBean.class)).collect(Collectors.toList());
	
		return collect;
	}

	@Override
	public EmployeeBean autoAssignEmp(long id) {
		
		List<EmployeeBean> empIncDetails = incidentResolvingServiceimpl.getEmpIncDetails(id);
		int size = empIncDetails.size();
		System.out.println(size);
		return null;
	}

	@Override
	public List<EmployeeBean> getEmpIncDetails(long id) {
		
		
		org.springframework.http.HttpHeaders httpHeaders = new org.springframework.http.HttpHeaders();
		httpHeaders.setContentType(MediaType.APPLICATION_JSON);

		HttpEntity<String> httpEntity = new HttpEntity<>(httpHeaders);

		String url = "http://localhost:8081/api/employee/getEmployee/" +id ;
		
	    ResponseEntity<List<EmployeeBean>> responseEntity = restTemplate.exchange(
	            url,
	            HttpMethod.GET,
	            httpEntity,
	            new ParameterizedTypeReference<List<EmployeeBean>>() {}  // Use ParameterizedTypeReference for generic types
	        );

	        List<EmployeeBean> employeeList = responseEntity.getBody();
	        
	        return employeeList;
	        }
	  
	  
	  
		
	
	

	@Override
	public void updateStatusCode(String statusCode, long incidentId) {
		Optional<IncidentResolvingEntity> optionalEntity = incidentResolvingRepository.findById(incidentId);

		if (optionalEntity.isPresent()) {

			IncidentResolvingEntity incidentResolvingEntity = optionalEntity.get();
			incidentResolvingEntity.getStatusEntity().setStatusCode(statusCode); 
			if(statusCode=="o")
			{
				incidentResolvingEntity.setResponseTime(dtf.format(now));
			}

			incidentResolvingRepository.save(incidentResolvingEntity);
			System.out.println(incidentResolvingEntity);

		} else {
			throw new IncidentNotFoundException("incident not found");
		}
		
	}

}

